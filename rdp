#!/bin/bash
#==============================================================================
#TITLE:            RDP
#DESCRIPTION:      This script makes it easy to connect to older iRDP 6 Controllers and provides a ThinClient experience
#AUTHOR:           Louis Ouellet
#DATE:             2020-09-30
#VERSION:          1.1-0

#==============================================================================
# CUSTOM SETTINGS
#==============================================================================

# Initialize Timer
SECOND=0

# Script name
scriptname=$(echo $0 | sed -e 's@.*/@@')

# Date
DATE=$(date +"%Y-%m-%d %H:%M:%S")

# Debug Switch
DEBUG=false


# Log Directory
if [ "$0" = "./${scriptname}" ];then
    LOGDIR=log/${scriptname}/
else
    LOGDIR=$HOME/log/${scriptname}/
fi
if [ ! -d $LOGDIR ];then
    mkdir -p $LOGDIR
fi

# Log File
LgFile="${LOGDIR}$(date +%s%N).log"

# Install Directory && Binary
INSTDIR=/usr/share/${scriptname}/
INSTBIN=/usr/bin/${scriptname}

# Default RDP Port
RDPPORT=3389

# Script Personalisation
Title=""
help_options="
-u                     => Set Username
-p                     => Set Password
-d                     => Set Domain
-h                     => Set Host
-o                     => Specify an openVPN connection to connect
-k                     => Enable Persist Mode which relaunches the prompt whenever you close your connection
-n                     => Enable Printer Redirection
-l                     => Enable Drives Redirection
-g                     => Enable Hardware Acceleration
-v                     => Enable Debug Mode
                          Input commands sent are stored in ${LOGDIR}
-i                     => Install Script as Binary
-r                     => Remove Installation
-m                     => Enable Multi-Monitor
-a                     => Set Alternate Port
"
help_functions="
"
#==============================================================================
# BASH SETUP
#==============================================================================

# Set Bash
set -o pipefail
set -e

# SETS LOCALE
# Updated to en_US to support
#export LC_ALL=en_US.UTF-8 > /dev/null 2>&1 || export LC_ALL=en_GB.UTF-8 > /dev/null 2>&1 || export LC_ALL=C.UTF-8 > /dev/null 2>&1

#==============================================================================
# FORMATTING
#==============================================================================

# COLORS
blackText=$(tput setaf 0)   # Black
redText=$(tput setaf 1)     # Red
greenText=$(tput setaf 2)   # Green
yellowText=$(tput setaf 3)  # Yellow
blueText=$(tput setaf 4)    # Blue
magentaText=$(tput setaf 5) # Magenta
cyanText=$(tput setaf 6)    # Cyan
whiteText=$(tput setaf 7)   # White
resetText=$(tput sgr0)      # Reset to default color

# STYLES
boldText=$(tput bold)
blinkingText=$(tput blink)
dimText=$(tput dim)

#==============================================================================
# Elements
#==============================================================================

# CHECK BOXES
checkBoxGood="[${greenText}✓${resetText}]"       # Good
checkBoxBad="[${redText}✗${resetText}]"          # Bad
checkBoxQuestion="[${magentaText}?${resetText}]"  # Question / ?
checkBoxInfo="[${cyanText}i${resetText}]"      # Info / i
checkBoxOutput="[${yellowText}!${resetText}]"      # Output / !

# STATUS
StatusOk="${checkBoxGood} System is healthy."
StatusUpdate="${checkBoxInfo} Updates are available."
StatusHot="${checkBoxBad} System is hot!"
StatusUnknown="${checkBoxQuestion} Status unknown!"

# Current Date & Time
PDATE(){
	printf "[$(date '+%Y-%m-%d %H:%M:%S')]"
}

# Log Types
INFO=$checkBoxInfo
OUTPUT=$checkBoxOutput
SUCCESS=$checkBoxGood
ERROR=$checkBoxBad

# Log Actions
CHECK="[CHECK]"
START="[START]"
RUN="[ RUN ]"
EMPT="[     ]"
OUT="[ OUT ]"
VAR="[ VAR ]"
#==============================================================================
# Logger
#==============================================================================

function Display_Help(){
  if [ $DEBUG = "true" ]; then
    echo "Help" | Debug i s
  fi
  echo -e "
Usage: $scriptname [options]

Options:
$help_options
"
}

function FERROR(){
  printf "FATAL ERROR: $1\n"
  Display_Help
  exit 0
}

function Debug(){
  if [ "$1" != "" ] && [ "$2" != "" ]; then
    case "$1" in
      info|i)
        TYPE=$INFO
        ;;
      success|s)
        TYPE=$SUCCESS
        ;;
      error|e)
        TYPE=$ERROR
        ;;
      output|o)
        TYPE=$OUTPUT
        ;;
      question|q)
        TYPE=$checkBoxQuestion
        ;;
    esac
    case "$2" in
      check|c|test|t)
        ACTION=$CHECK
        ;;
      start|s)
        ACTION=$START
        ;;
      run|r)
        ACTION=$RUN
        ;;
      empty|e)
        ACTION=$EMPT
        ;;
      output|o)
        ACTION=$OUT
        ;;
      variable|var|v)
        ACTION=$VAR
        ;;
    esac
    while read DCMD; do
      LogFile=$LgFile
      if [ "$3" != "" ]; then
        LogFile=$3
      fi
      if [ $DEBUG = "true" ]; then
        printf "${TYPE}$(PDATE)${ACTION} ${DCMD}\n" | tee -a $LogFile
      else
        printf "${TYPE}$(PDATE)${ACTION} ${DCMD}\n"
      fi
    done
  else
    FERROR "Missing Argument(s)"
  fi
}

function Executing(){
  if [ "$1" != "" ]; then
    if [ $DEBUG = "true" ]; then
      echo "Executing $1" | Debug i s
      if eval $1 2>&1 | Debug o o;then
        echo "$1" | Debug s r
      else
        echo "$1" | Debug e r
      fi
    else
      eval $1
    fi
  else
    FERROR "Missing Argument(s)"
  fi
}

function Check_Package(){
  if [ "$1" != "" ]; then
    if [ $DEBUG = "true" ]; then
      echo "Check_Package $1" | Debug i s
    fi
    if [ $(dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
      Executing "sudo apt-get update"
      Executing "sudo apt-get install $1 -y"
    fi
  else
    FERROR "Missing Argument(s)"
  fi
}

function Connect(){
	if [ "$RDPUSER" = "" ]; then
		RUSER=$(yad --fixed --borders=15 --width=400 --class="GSu" --title="Username" --text="Enter username" --entry --button=OK 2>/dev/null)
	else
		RUSER=$RDPUSER
	fi
	if [ "$RDPPASS" = "" ]; then
		RPASS=$(yad --fixed --borders=15 --width=400 --class="GSu" --title="Password" --text="Enter password for user <b>$RDPUSER</b>:" --entry --hide-text --button=OK 2>/dev/null)
	else
		RPASS=$RDPPASS
	fi
	if [ "$RDPDN" = "" ]; then
		RDN=$(yad --fixed --borders=15 --width=400 --class="GSu" --title="Domain" --text="Enter domain" --entry --button=OK 2>/dev/null)
	else
		RDN=$RDPDN
	fi
	if [ "$RDPHOST" = "" ]; then
		RHOST="${RUSER}.${RDN}"
	else
		RHOST=$RDPHOST
	fi
	RIP=$(dig albcie.com a +yaml | yq eval -j | jq .[0].message.response_message_data.ANSWER_SECTION[0] | sed -e 's/"//g' | awk '{ print $5 }')
	if [ "$(nmap -Pn -p ${RDPPORT} ${RIP} | grep "${RDPPORT}/tcp" | awk '{ print $2 }' 2>/dev/null)" = "open" ]; then
		if [ "$VPNNAME" != "" ]; then sudo systemctl start openvpn@$VPNNAME; fi
		RDP_Options="$RDP_Options /v:$RHOST /u:$RUSER /p:$RPASS /d:$RDN"
		if [ $DEBUG = "true" ]; then
			Executing "xfreerdp /cert-ignore $RDP_Options"
		else
			Executing "xfreerdp /cert-ignore $RDP_Options >/dev/null 2>/dev/null"
		fi
		if [ "$VPNNAME" != "" ]; then sudo systemctl stop openvpn@$VPNNAME; fi
	else
		yad --fixed --borders=15 --width=600 --image dialog-question --title="Remote Desktop Connection Error" --text="${RHOST} is not accepting the connexion" --button=OK 2>/dev/null
	fi
}

function Install(){
    if [ "$0" = "./${scriptname}" ];then
			Check_Package freerdp2-x11
			Check_Package zenity
			Check_Package yad
			Check_Package nmap
			Check_Package jq
			Check_Package snap
			Executing "snap install yq"
      Executing "sudo mkdir -p $INSTDIR"
      Executing "sudo cp -R . $INSTDIR"
      Executing "sudo ln -s ${INSTDIR}${scriptname} $INSTBIN"
    else
      FERROR "Unable to track source directory"
    fi
}

function Remove(){
    if [ "$0" = "./${scriptname}" ] || [ "$0" = "/usr/bin/${scriptname}" ];then
        if [ -d $INSTDIR ] && [ -f $INSTBIN ];then
            Executing "sudo rm -rf $INSTDIR"
            Executing "sudo rm -f $INSTBIN"
        else
            FERROR "Script is not installed"
        fi
    else
        FERROR "Unable to track source directory"
    fi
}

#==============================================================================
# RUN OPTIONS & FUNCTIONS
#==============================================================================

if [ "$0" != "./${scriptname}" ] && [ "$0" != "/usr/bin/${scriptname}" ];then
    FERROR "Script must be run from source folder or as binary."
fi

RDP_Options=

while getopts ":virlkgnmd:a:u:p:h:o:" option
	do
	case "${option}"
		in
      i) Install;RUNNING='FALSE';;
      r) Remove;RUNNING='FALSE';;
			v) DEBUG=true;;
			k) PERSIST='TRUE';;
			u) RDPUSER=$OPTARG;;
			p) RDPPASS=$OPTARG;;
			h) RDPHOST=$OPTARG;;
			d) RDPDN=$OPTARG;;
			o) VPNNAME=$OPTARG;;
			l) RDP_Options="$RDP_Options /drives";;
			n) RDP_Options="$RDP_Options /printer";;
			g) RDP_Options="$RDP_Options /gdi:hw";;
			a) RDP_Options="$RDP_Options /port:$OPTARG";RDPPORT=$OPTARG;;
			m) RDP_Options="$RDP_Options /multimon";;
			\? )
				echo "Invalid option: $OPTARG" 1>&2
          Display_Help
          exit 0
				;;
			: )
				echo "Invalid option: $OPTARG requires an argument" 1>&2
          Display_Help
          exit 0
				;;
	esac
done
shift $((OPTIND -1))

#==============================================================================
# RUN SCRIPT
#==============================================================================

if [ "$RUNNING" = "" ]; then
	if [ "$PERSIST" = "" ]; then
		Connect
	else
		while true; do
			RHOST=
			RUSER=
			RPASS=
			RDN=
			Connect;
			# Connect && break;
		done
	fi
fi

exit 0
